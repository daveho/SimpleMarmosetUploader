// Simple Marmoset Uploader
// Copyright (C) 2011-2014, David H. Hovemeyer <david.hovemeyer@gmail.com>
//
// Free software, distributed under the terms of the Apache License, version 2.0
// See: http://www.apache.org/licenses/LICENSE-2.0.html

package edu.ycp.cs.marmoset.uploader.handlers;

import java.io.File;
import java.io.IOException;
import java.util.Dictionary;
import java.util.Properties;
import java.util.regex.Matcher;

import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.mime.HttpMultipartMode;
import org.apache.http.entity.mime.MultipartEntity;
import org.apache.http.entity.mime.content.FileBody;
import org.apache.http.entity.mime.content.StringBody;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.util.EntityUtils;

import edu.ycp.cs.marmoset.uploader.Activator;

public abstract class Uploader {
	private static final String SUBMIT_PROJECT_VIA_BLUE_J_SUBMITTER = "/bluej/SubmitProjectViaBlueJSubmitter";
	private static final String SUBMIT_PROJECT_VIA_ECLIPSE = "/eclipse/SubmitProjectViaEclipse";

	public static Result sendZipFileToServer(Properties submitProperties, File zipFile, String username, String password) throws IOException {
		
		String submitUrl = submitProperties.getProperty(SubmitProjectHandler.PROP_SUBMIT_URL);
		Matcher m = SubmitProjectHandler.SUBMIT_URL_PATTERN.matcher(submitUrl);
		if (!m.matches()) {
			throw new IllegalStateException(); // we've already verified that it's a match
		}

		String proto = submitUrl.substring(0, submitUrl.indexOf(':')+1);
		
		String hostName = m.group(2);
		String portNumber = ""; // assume no port was specified
		int colonInHostName = hostName.indexOf(':');
		if (colonInHostName >= 0) {
			// host name is qualified with a port number
			portNumber = hostName.substring(colonInHostName);
			hostName = hostName.substring(0, colonInHostName);
		}
		String resourceName = m.group(3);
		
		// If the submit url was generated by the Marmoset UI, it will
		// end in /eclipse/SubmitProjectViaEclipse.  If this is the case,
		// change it to /bluej/SubmitProjectViaBlueJSubmitter.
		if (resourceName.endsWith(SUBMIT_PROJECT_VIA_ECLIPSE)) {
			resourceName =
					resourceName.substring(0, resourceName.length() - SUBMIT_PROJECT_VIA_ECLIPSE.length()) +
					SUBMIT_PROJECT_VIA_BLUE_J_SUBMITTER;
		}

		// Build the URL to access the upload servlet.
		String url = proto + "//" + hostName + portNumber + resourceName;
//		Activator.logMessage("url: " + url);
		
		HttpPost post = null;
		HttpClient client = null;
		try {
			post = new HttpPost(url);
			
			// See:
			// http://stackoverflow.com/questions/18733562/how-to-sending-multipart-form-data-post-request-in-with-use-of-apache-httpcompon
			
			MultipartEntity entity = new MultipartEntity(HttpMultipartMode.BROWSER_COMPATIBLE);
			
			entity.addPart("campusUID", new StringBody(username));
			entity.addPart("password", new StringBody(password));
			entity.addPart("submitClientTool", new StringBody("SimpleMarmosetUploader"));

			// You'd think getting the version of an Eclipse plugin would be easy,
			// but it's not.
			Dictionary<?, ?> dictionary = Activator.getDefault().getBundle().getHeaders();
			String pluginVersion = (String) dictionary.get("Bundle-Version");
			if (pluginVersion == null) {
				pluginVersion = "unknown";
			}
			entity.addPart("submitClientVersion", new StringBody(pluginVersion));
			
			// All submit properties except the submit URL must be added as parameters
			for (String prop : SubmitProjectHandler.REQUIRED_PROPERTIES) {
				if (!prop.equals(SubmitProjectHandler.PROP_SUBMIT_URL)) {
					entity.addPart(prop, new StringBody(submitProperties.getProperty(prop)));
				}
			}
			
			// Add the file part
			entity.addPart("submittedFiles", new FileBody(zipFile, "application/zip"));
			
			// Add the MultipartEntity to the POST request
			post.setEntity(entity);

			// Execute the request!
			client = new DefaultHttpClient();

			// Return the result
			HttpResponse response = client.execute(post);
			Result result = new Result();
			result.httpCode = response.getStatusLine().getStatusCode();
			result.responseBody = EntityUtils.toString(response.getEntity());
			
			return result;
		} finally {
			// Shut down httpclient
			if (client != null) {
				client.getConnectionManager().shutdown();
			}
		}
	}
}
