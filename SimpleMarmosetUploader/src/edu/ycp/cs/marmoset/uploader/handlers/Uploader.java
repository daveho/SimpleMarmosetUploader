package edu.ycp.cs.marmoset.uploader.handlers;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Dictionary;
import java.util.List;
import java.util.Properties;
import java.util.regex.Matcher;

import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.HttpException;
import org.apache.commons.httpclient.methods.PostMethod;
import org.apache.commons.httpclient.methods.multipart.FilePart;
import org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity;
import org.apache.commons.httpclient.methods.multipart.Part;
import org.apache.commons.httpclient.methods.multipart.StringPart;
import org.apache.commons.httpclient.params.HttpMethodParams;

import edu.ycp.cs.marmoset.uploader.Activator;

public abstract class Uploader {
	private static final String SUBMIT_PROJECT_VIA_BLUE_J_SUBMITTER = "/bluej/SubmitProjectViaBlueJSubmitter";
	private static final String SUBMIT_PROJECT_VIA_ECLIPSE = "/eclipse/SubmitProjectViaEclipse";

	public static Result sendZipFileToServer(Properties submitProperties, File zipFile, String username, String password) throws HttpException, IOException {
		PostMethod post = null;
		HttpClient client = null;
		
		String submitUrl = submitProperties.getProperty(SubmitProjectHandler.PROP_SUBMIT_URL);
		Matcher m = SubmitProjectHandler.SUBMIT_URL_PATTERN.matcher(submitUrl);
		if (!m.matches()) {
			throw new IllegalStateException(); // we've already verified that it's a match
		}

		String proto = submitUrl.substring(0, submitUrl.indexOf(':')+1);
		
		String hostName = m.group(2);
		String portNumber = ""; // assume no port was specified
		int colonInHostName = hostName.indexOf(':');
		if (colonInHostName >= 0) {
			// host name is qualified with a port number
			portNumber = hostName.substring(colonInHostName);
			hostName = hostName.substring(0, colonInHostName);
		}
		String resourceName = m.group(3);
		
		// If the submit url was generated by the Marmoset UI, it will
		// end in /eclipse/SubmitProjectViaEclipse.  If this is the case,
		// change it to /bluej/SubmitProjectViaBlueJSubmitter.
		if (resourceName.endsWith(SUBMIT_PROJECT_VIA_ECLIPSE)) {
			resourceName =
					resourceName.substring(0, resourceName.length() - SUBMIT_PROJECT_VIA_ECLIPSE.length()) +
					SUBMIT_PROJECT_VIA_BLUE_J_SUBMITTER;
		}

		// Build the URL to access the upload servlet.
		String url = proto + "//" + hostName + portNumber + resourceName;
//		Activator.logMessage("url: " + url);
		
		try {
			post = new PostMethod(url);
			
			post.getParams().setBooleanParameter(HttpMethodParams.USE_EXPECT_CONTINUE, true);
			
			List<Part> parts = new ArrayList<Part>();
			
			// Add form parameters
			parts.add(new StringPart("campusUID", username));
			parts.add(new StringPart("password", password));
			parts.add(new StringPart("submitClientTool", "SimpleMarmosetUploader"));
			
			// You'd think getting the version of an Eclipse plugin would be easy,
			// but it's not.
			Dictionary<?, ?> dictionary = Activator.getDefault().getBundle().getHeaders();
			String pluginVersion = (String) dictionary.get("Bundle-Version");
			if (pluginVersion == null) {
				pluginVersion = "unknown";
			}
			parts.add(new StringPart("submitClientVersion", pluginVersion));
			
			// All submit properties except the submit URL must be added as parameters
			for (String prop : SubmitProjectHandler.REQUIRED_PROPERTIES) {
				if (!prop.equals(SubmitProjectHandler.PROP_SUBMIT_URL)) {
					parts.add(new StringPart(prop, submitProperties.getProperty(prop)));
				}
			}
			
			// Add the file part
			parts.add(new FilePart("submittedFiles", zipFile));
			MultipartRequestEntity entity = new MultipartRequestEntity(parts.toArray(new Part[parts.size()]), post.getParams());
			post.setRequestEntity(entity);

			// Execute the request!
			client = new HttpClient();
			Result result = new Result();
			result.httpCode = client.executeMethod(post);
			result.responseBody = post.getResponseBodyAsString();
			
			return result;
		} finally {
			if (post != null) {
				post.releaseConnection();
			}
			if (client != null) {
				client.getHttpConnectionManager().closeIdleConnections(0L);
			}
			
		}
	}
}
